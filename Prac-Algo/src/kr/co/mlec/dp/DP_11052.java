package kr.co.mlec.dp;

import java.util.Scanner;

//문제명: 카드 구매하기
public class DP_11052 {
	public static void main(String[] args) {
		//카드를 구매하는데 가지고 있는 돈을 최대한 많이 지불해서 카드 N개를 구매하려고한다.
		//P[i]는 카드가 i개 포함된 카드팩의 가격
		//그런데 민규는 카드가 적게들어있는 카드팩이라도 비싸면 높은등급이 있다고 믿고있다
		//n개를 사야하는데 가장 많이 돈을 지불해야하는 상황을 찾고싶다.
		//dp[i]= i개 샀을 때 최고로 돈을 많이 쓸수 있는 경우, 카드의 수는 상관없다.
		//i개 샀을대 최대값을 각각저장해두고 마지막에 1개부터 n-1 개까지 샀을떄 미리 구해논 최대값 + n-1 개를 샀을때는 +p[1] 개를 n-2개를 했을땐p[2] 값을 더해주면서
		//가장 큰 값을 구해준다.
		//dp[i]를 구할 때 for문을 이용해서 i개 살때 최대값을 미리 바텀 업 방식으로 구하면서 올라왔으니
		//dp[i] 구할 때 dp[i] 를 1,2,3 증가시키면서 1개 살때, 2개살때 최대값을 구한것을 활용하면서 살수있는 나머지수 1개를사면 3개 ,2개를
		//dp[i]= max(dp[n-i] + p[i])
		int dp[] = new int[1001];
		int p[] = new int[1001];
		Scanner sc = new Scanner(System.in);
		int test= sc.nextInt();

		for(int i=1;i<=test;i++) {
			p[i]=sc.nextInt();
		}
		dp[0]=0; //0개 살경우
		dp[1]=p[1]; //1개를 살경우는 하나를 살수있을때가 최고의 경우가 되기때문에
		for(int i=1;i<=test;i++) { // 
			//1개 샀을 때부터  test개 샀을때까지  for문을 돌려야함 그리고 1개 샀을 때 나머지 경우도
			for(int j=1;j<=i;j++) { //j가 i보다 작을때까지만 for문을 실행하는 이유는 
				//i=1 이면 4개살려고 할때 1개를 산거니까 나머지 3개를 사야한다. 이거보다 커지면 안됨
				//dp[i] 는 i개를 샀을때 최대값임 i가 3이 될때 j=1,2 값에서 
				//처음에 dp[2] : 2개를 샀을때 최대값 + 1개를 살때
				//당므으로 dp[1] : 1개를 샀을때 최대값 + 2개를 살때
				if(dp[i]<dp[i-j]+p[j]) {
					dp[i]=dp[i-j]+p[j];
				}
			}					
	}
		System.out.println(dp[test]);

	}
}

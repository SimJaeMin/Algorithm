package kr.co.mlec.dp;

import java.util.Scanner;

//문제명 : 계단 오르기
public class DP_2579 {
	public static void main(String[] args) {
		//계단 오르기 게임은 계단 아래 시작점 부터 게단 꼭대기에 위치한 도착점까지 가는 게임
		//계단을 밟으면 점수가 있는데 가장 큰 점수를 얻을수 있게 계단을 밟아야한다.
		//한번에 한 계단 , 두 계단 씩 오를 수있고 연속 3개는 밟지 못한다.
		//마지막 도착은 무조건 밟아야한다. ==> 마지막 부터 시작해서 내려가자 그러면 마지막은 무조건 밟은거니까 ==> 인줄알았으나 이렇게 하면안됨
		//마지막은 무조건 밟아야하니까 그냥 마지막 밟은 것중 최대를 출력해주면 되는거임 
		//이전 까지 문제는 1~N 중 가장 큰값이였지만 여기서는 그냥 dp[n][1] ,dp[n][2] 중 큰값을 출력해주면 무조건 마지막 계단을 밟은것중 최대를 출력해주는것과같다.
		//시작점은 계단이 아님
		// 0번연속은 없음 계단은 무조건 밟아야되니까 
		//dp[i][L] : i번째 계단이 연속 L번임 그 떄 최대점수
		//DP[i][1]= i번째 계단이 한번 연속인거 ==> i-1은 안밟음
		//DP[i][2]= i번째 게단이 2번 연속인거 ==> i-1은 무조건 밟음 연속된 거니까 2계단을 한번에 오르면 연속이아님
		//그리고 i-1은 1번째가 되야함 i번째가 2번연속이니까. i-2는 무조건 안밟음 3번연속이 되니까.
		//DP[i][1]=a[i] (현재 밟은 계단) + max(dp[i-2][1],dp[i-2][2]) i-2는 무조건 밟으니까 그 때 까지 밟은거중 큰값
		//DP[i][2]=a[i] (현재 밟은 계단) +  dp[i-1][1];
		
		Scanner sc= new Scanner(System.in);
		int num=sc.nextInt();
		int a[] = new int[num+1];
		int dp[][] =new int[num+1][3];
		
		for(int i=1;i<=num;i++) {
			a[i]=sc.nextInt();
		}
		
		dp[1][1]=a[1];
		
		for(int i=2;i<=num;i++) {
			dp[i][1]=Math.max(dp[i-2][1], dp[i-2][2])+a[i]; // i 번째가 1번연속이면 i-1은 안밟은상태고 i-2는 밟은 상태인데 i-2에서 최대값을 구한후 현재 값 더하기
			dp[i][2]=dp[i-1][1]+a[i]; // i번째가 2번연속이면 i-1번째는 무조건 1번연속이니까 i-1에 현재값더해주기
		}

		System.out.println(Math.max(dp[num][1], dp[num][2])); //마지막 계단은 무조건 밟으니까 마지막 계단을 밟는 경우의 수에서 큰 값을 출력해주기
		
	}
}

package kr.co.mlec.dp;

import java.util.Scanner;

//문제명 : 타일 채우기 
public class DP_2133 {
	public static void main(String[] args) {
		//3*N 크기의 벽을 2*1, 1*2 로 채우는 경우 의 수를 구하는 문제임
		// 3*N에서 마지막에 올수 있는 경우의 수는 
		// 크기가 4 미만일 경우는 3가지 경우가 있다 이전에 풀었던거는 마지막에 올수 있는게 2가지있었고 
		// 가로길이가 달랐기 때문에 그 2개를 더해주면됬지만 이번에 3가지는 가로길이가 다 똑같아서 
		// 나온 결과값에 3을 곱해주면된다.
		// 크기가 4가 넘어가고, 길이가 2의 배수이면 만들수 있는 경우의수가 2가지씩 늘어난다 (* 2)를 해준다
		// 크기가 4가 넘어가면 4가 될동안 -2 씩해주면서 ( * 2) 를 해준것을 더해주면 된다.
		//DP[I]=가로길이가 I인 벽돌을 2*1 ,1*2로 채우는 경우의 수
		//DP[I]= I가 2부터 는 * 3을 해주고, 4가 넘어가면*2를 
		//어렵다 모르겠다
		
		Scanner sc = new Scanner(System.in);
		int num=sc.nextInt();
		long dp[]=new long[num+1];
		dp[0]=1;
		
		for(int i=2;i<=num;i=i+2) {
			dp[i]=dp[i-2]*3; //기본적으로 마지막에 올 수 있는 경우의 수는 3가지고 그 3가지 모두 행의 길이가 2이기 때문에 -2 를 해준거에 *3을 해주면된다.
			for(int j=i-4;j>=0;j=j-2) {
				dp[i]=dp[i]+dp[j]*2; // 4가 넘어가면 만드는 방식이 2가지씩 추가된다. 그래서  *2 
								     // I가 6이라면 끝에 올수있는게 4자리로 올수있으니까 J=2 끝이 4자리 고정이니까 2로 올수있는 경우의 수에 4자리 만들수있는 끝이 2개있으니까 * 2 를해준다.
				//만약에 i 가 10이면 10, 8, 6 일때 한번 씩 *2를 해줘야해서 for문이 저렇게된다.
			}
		}
		System.out.println(dp[num]);
		
	}
}
